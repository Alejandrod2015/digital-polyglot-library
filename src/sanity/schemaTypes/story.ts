import { defineField, defineType } from "sanity";
import type { InputProps } from "sanity";
import React from "react";

export const story = defineType({
  name: "story",
  title: "Story",
  type: "document",

  fields: [
    // ðŸ§  BotÃ³n generador (puedes mover este bloque al inicio para verlo arriba)
    defineField({
      name: "generate",
      title: "ðŸª„ Generate Story",
      type: "string",
      readOnly: true,
      components: {
        input: (props: InputProps) => {
          const StoryGenerator =
            require("../components/StoryGeneratorInput").default;
          return React.createElement(StoryGenerator, props as any);
        },
      },
    }),

    defineField({
      name: "title",
      title: "Title",
      type: "string",
      validation: (Rule) => Rule.required(),
    }),

    defineField({
      name: "slug",
      title: "Slug",
      type: "slug",
      options: {
        source: "title",
        maxLength: 96,
      },
    }),

    defineField({
      name: "text",
      title: "Main Text",
      type: "text",
    }),

    defineField({
      name: "vocabRaw",
      title: "Vocabulary (raw JSON or text)",
      type: "text",
      description:
        "This field stores the vocabulary list generated by ChatGPT. The system will parse it automatically.",
      rows: 10,
    }),

    defineField({
      name: "isFree",
      title: "Free Story",
      type: "boolean",
      initialValue: false,
      description: "Mark true if this story should be freely available to all users.",
    }),

    defineField({
      name: "level",
      title: "Difficulty Level",
      type: "string",
      options: {
        list: [
          { title: "Beginner", value: "beginner" },
          { title: "Intermediate", value: "intermediate" },
          { title: "Advanced", value: "advanced" },
        ],
      },
    }),

    defineField({
      name: "theme",
      title: "Theme / Topics",
      type: "array",
      of: [{ type: "string" }],
      description: "Cultural or contextual topics covered by the story.",
    }),

    defineField({
  name: "audio",
  title: "Audio File",
  type: "file",
  options: {
    storeOriginalFilename: true, // guarda el nombre original
  },
  fields: [
    {
      name: "caption",
      type: "string",
      title: "Caption",
    },
  ],
}),


    defineField({
      name: "book",
      title: "Related Book",
      type: "reference",
      to: [{ type: "book" }],
      validation: (Rule) => Rule.required(),
    }),

    defineField({
      name: "published",
      title: "Published",
      type: "boolean",
      initialValue: false,
    }),
  ],

  preview: {
    select: { title: "title", isFree: "isFree", level: "level" },
    prepare({ title, isFree, level }) {
      const subtitle = [
        isFree ? "Free" : null,
        level ? `Level: ${level}` : null,
      ]
        .filter(Boolean)
        .join(" Â· ");

      return {
        title: title || "Untitled Story",
        subtitle: subtitle || "No level assigned",
      };
    },
  },
});
