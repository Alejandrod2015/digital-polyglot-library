import { defineField, defineType } from "sanity";
import type { InputProps } from "sanity";
import React from "react";
import StoryGeneratorInput from "../components/StoryGeneratorInput";

export const story = defineType({
  name: "story",
  title: "Story",
  type: "document",

  fields: [
    //
    // ðŸ§­ INPUT SECTION â€” configuraciÃ³n previa a la generaciÃ³n
    //
    defineField({
      name: "language",
      title: "Language",
      type: "string",
      options: {
        list: [
          { title: "Spanish", value: "spanish" },
          { title: "English", value: "english" },
          { title: "Portuguese", value: "portuguese" },
          { title: "French", value: "french" },
          { title: "Italian", value: "italian" },
          { title: "German", value: "german" },
        ],
      },
    }),

    // DESPUÃ‰S
defineField({
  name: "region_es",
  title: "Region",
  type: "string",
  hidden: ({document}) => document?.language !== "spanish",
  options: {
    list: [
      { title: "Spain", value: "spain" },
      { title: "Colombia", value: "colombia" },
      { title: "Mexico", value: "mexico" },
      { title: "Argentina", value: "argentina" },
      { title: "Chile", value: "chile" },
      { title: "Peru", value: "peru" },
    ],
  },
  description: "Optional.",
}),

defineField({
  name: "region_en",
  title: "Region",
  type: "string",
  hidden: ({document}) => document?.language !== "english",
  options: {
    list: [
      { title: "United States", value: "usa" },
      { title: "United Kingdom", value: "uk" },
      { title: "Australia", value: "australia" },
      { title: "Canada", value: "canada" },
    ],
  },
  description: "Optional.",
}),

defineField({
  name: "region_de",
  title: "Region",
  type: "string",
  hidden: ({document}) => document?.language !== "german",
  options: { list: [{ title: "Germany", value: "germany" }] },
  description: "Optional.",
}),

defineField({
  name: "region_fr",
  title: "Region",
  type: "string",
  hidden: ({document}) => document?.language !== "french",
  options: { list: [{ title: "France", value: "france" }] },
  description: "Optional.",
}),

defineField({
  name: "region_it",
  title: "Region",
  type: "string",
  hidden: ({document}) => document?.language !== "italian",
  options: { list: [{ title: "Italy", value: "italy" }] },
  description: "Optional.",
}),

defineField({
  name: "region_pt",
  title: "Region",
  type: "string",
  hidden: ({document}) => document?.language !== "portuguese",
  options: { list: [{ title: "Brazil", value: "brazil" }] },
  description: "Optional.",
}),


    defineField({
      name: "level",
      title: "Level",
      type: "string",
      options: {
        list: [
          { title: "Beginner", value: "beginner" },
          { title: "Intermediate", value: "intermediate" },
          { title: "Advanced", value: "advanced" },
        ],
      },
    }),

    defineField({
      name: "focus",
      title: "Focus",
      type: "string",
      options: {
        list: [
          { title: "Adjectives", value: "adjectives" },
          { title: "Verbs", value: "verbs" },
          { title: "Nouns", value: "nouns" },
          { title: "Expressions", value: "expressions" },
          { title: "Slang", value: "slang" },
        ],
      },
    }),

    defineField({
      name: "topic",
      title: "Topic",
      type: "string",
      description: "Free text topic for the story theme.",
    }),

    defineField({
      name: "generate",
      title: "ðŸª„ Generate Story",
      type: "string",
      readOnly: true,
      components: {
        input: (props: InputProps) => {
          void props; // evita 'unused var'
          return React.createElement(StoryGeneratorInput);
        },
      },
    }),

    //
    // ðŸª¶ OUTPUT SECTION â€” resultado generado y metadatos
    //
    defineField({
      name: "title",
      title: "Title",
      type: "string",
      validation: (Rule) => Rule.required(),
    }),

    defineField({
      name: "slug",
      title: "Slug",
      type: "slug",
      options: {
        source: "title",
        maxLength: 96,
      },
    }),

    defineField({
      name: "text",
      title: "Main Text",
      type: "text",
    }),

    defineField({
      name: "vocabRaw",
      title: "Vocabulary (raw JSON or text)",
      type: "text",
      description:
        "This field stores the vocabulary list generated by ChatGPT. The system will parse it automatically.",
      rows: 10,
    }),

    defineField({
      name: "isFree",
      title: "Free Story",
      type: "boolean",
      initialValue: false,
      description:
        "Mark true if this story should be freely available to all users.",
    }),

    defineField({
      name: "theme",
      title: "Theme / Topics",
      type: "array",
      of: [{ type: "string" }],
      description: "Cultural or contextual topics covered by the story.",
    }),

    defineField({
      name: "audio",
      title: "Audio File",
      type: "file",
      options: {
        storeOriginalFilename: true,
      },
      fields: [
        {
          name: "caption",
          type: "string",
          title: "Caption",
        },
      ],
    }),

    defineField({
      name: "book",
      title: "Related Book",
      type: "reference",
      to: [{ type: "book" }],
      validation: (Rule) => Rule.required(),
    }),

    defineField({
      name: "published",
      title: "Published",
      type: "boolean",
      initialValue: false,
    }),
  ],

  preview: {
    select: { title: "title", isFree: "isFree", level: "level" },
    prepare({ title, isFree, level }) {
      const subtitle = [
        isFree ? "Free" : null,
        level ? `Level: ${level}` : null,
      ]
        .filter(Boolean)
        .join(" Â· ");

      return {
        title: title || "Untitled Story",
        subtitle: subtitle || "No level assigned",
      };
    },
  },
});
